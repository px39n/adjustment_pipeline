%--------------------------------------------------------------------------
%   
%   SELECTED SECTIONS OF ADJUSTMENT CALCULATION
%      Free Network Adjustment Calculation
%        - Combined Horizontal Network -
% 
%   Author         : Anastasia Pasioti
%   Version        : May 30, 2017
%   Last changes   : Mar. 28, 2019
%
%--------------------------------------------------------------------------

clc;
clear all;
close all;
format long g;
%--------------------Task 1------------------------------------------------

%--------------------------------------------------------------------------
%   Observations and initial values for unknowns
%--------------------------------------------------------------------------
%Load all files
dist = load('Distances.txt');
dir = load('Directions.txt');

%Vector of observations
L =    [dist(:,3);dir(:,3)*pi/200];

%Gauss-Krueger coordinates for new points [m]
y1 = 5314698.13;
x1 = 4965804.18;
y6 = 5317651.428;
x6 = 4968940.373;
y9 = 5324162.853;
x9 = 4970922.160;
y15 = 5320448.85;
x15 = 4962997.53;

%Initial values for orientation unknowns
w1=0;
w6=0;
w9=0;
w15=0;

%Initial values for unknowns
x_0=[y1 x1 x6 y9 x9 y15 x15 w1 w6 w9 w15]':

%--------------------------------------------------------------------------
%   Points for datum definition
%--------------------------------------------------------------------------          
xy=reshape(x_0(1:8),2,4);

%Case a and b, all points
datum =diag([1,1,1,1]);

%Case c, points 6 and 9
% datum = 

%Case d, points 6 and 1
% datum = 

%Number of points
 p =4;               %p = 4, for case a and case b
                                  %p = 2, for case c and case d

%Centroid
x_c = (1/p)*sum(datum*xy(2,:)');
y_c =(1/p)*sum(datum*xy(1,:)'); 

%Coordinates reduced to the centroid
y1 = y1-y_c;
y6 = y6-y_c;
y9 = y9-y_c;
y15 = y15-y_c;
x1 = x1-x_c;
x6 = x6-x_c;
x9 = x9-x_c;
x15 = x15-x_c;

%Initial values for unknowns after reduction to the centroid
x_0=[y1 x1 x6 y9 x9 y15 x15 w1 w6 w9 w15]'; 

%--------------------------------------------------------------------------  

%Number of observations
no_n = length(L);

%Number of unknowns
no_u = length(X_0);

%Redundancy
r = no_n-no_u+3;

%--------------------------------------------------------------------------
%  Stochastic model
%--------------------------------------------------------------------------
%VC Matrix of the observations
s_dist=0.1;
s_dir =0.001*pi/200;
S_LL=diag([s_dist^2*ones(length(dist),1) s_dir^2*ones(length(dir),1)]);

%Theoretical standard deviation
sigma_0 = 1;

%Cofactor matrix of the observations
Q_LL = 1/sigma_0^2*S_LL;

%Weight matrix
P = inv(Q_LL);

%--------------------------------------------------------------------------
%  Adjustment
%--------------------------------------------------------------------------
%break-off conditions
epsilon = 10^-5;
delta =10^-11;
max_x_hat = 10^Inf;

%Number of iterations
iteration = 0;

%Initialising A
A = zeros(no_n,no_u);

%Iteration
while max_x_hat> epsilon || Check2 > deltal

    %Vector of distances
    L_0(1)=dis(y6,x6,y1,x1);
    L_0(2)=dis(y9,x9,y1,x1);
    L_0(3)=dis(y9,x9,y6,x6);
    L_0(4)=dis(y15,x15,y1,x1);
    L_0(5)=dis(y15,x15,y9,x9);
    
    %Vector of directions
    L_0(6)=direction(y1,x1,y6,x6,w1);
    L_0(7)=direction(y1,x1,y15,x15,w1);
    L_0(8)=direction(y6,x6,y1,x1,w6);
    L_0(9)=direction(y6,x6,y9,x9,w6);
    L_0(10)=direction(y9,x9,y15,x15,w9);
    L_0(11)=direction(y9,x9,y1,x1,w9);
    L_0(12)=direction(y9,x9,y6,x6,w9);
    L_0(13)=direction(y15,x15,y1,x1,w15);
    L_0(14)=direction(y15,x15,y9,x9,w15);
    
	%Vector of reduced observations
    l = L-L_0';

    %Design matrix
    A(1,1)=ds_dy_to(y6,x6,y1,x1);
    A(1,2)=ds_dx_to(y6,x6,y1,x1);
    A(1,3)=ds_dy_from(y6,x6,y1,x1);
    A(1,4)=ds_dx_from(y6,x6,y1,x1);
    
    A(2,1)=ds_dy_to(y9,x9,y1,x1);
    A(2,2)=ds_dx_to(y9,x9,y1,x1);
    A(2,5)=ds_dy_from(y9,x9,y1,x1);
    A(2,6)=ds_dx_from(y9,x9,y1,x1);
    
    A(3,3)=ds_dy_to(y9,x9,y6,x6);
    A(3,4)=ds_dx_to(y9,x9,y6,x6);
    A(3,5)=ds_dy_from(y9,x9,y6,x6);
    A(3,6)=ds_dx_from(y9,x9,y6,x6);
    
    A(4,1)=ds_dy_to(y15,x15,y1,x1);
    A(4,2)=ds_dx_to(y15,x15,y1,x1);
    A(4,7)=ds_dy_from(y15,x15,y1,x1);
    A(4,8)=ds_dx_from(y15,x15,y1,x1);

    A(5,5)=ds_dy_to(y15,x15,y9,x9);
    A(5,6)=ds_dx_to(y15,x15,y9,x9);
    A(5,7)=ds_dy_from(y15,x15,y9,x9);
    A(5,8)=ds_dx_from(y15,x15,y9,x9);
    
    A(6,1)=dr_dy_from(y1,x1,y6,x6);
    A(6,2)=dr_dx_from(y1,x1,y6,x6);
    A(6,3)=dr_dy_to(y1,x1,y6,x6);
    A(6,4)=dr_dx_to(y1,x1,y6,x6);
    A(6,9)=-1;
    
    A(7,1)=dr_dy_from(y1,x1,y15,x15);
    A(7,2)=dr_dx_from(y1,x1,y15,x15);
    A(7,7)=dr_dy_to(y1,x1,y15,x15);
    A(7,8)=dr_dx_to(y1,x1,y15,x15);
    A(7,9)=-1;
    
    A(8,1)=dr_dy_to(y6,x6,y1,x1);
    A(8,2)=dr_dx_to(y6,x6,y1,x1);
    A(8,3)=dr_dy_from(y6,x6,y1,x1);
    A(8,4)=dr_dx_from(y6,x6,y1,x1);
    A(8,10)=-1;
    
    A(9,3)=dr_dy_from(y6,x6,y9,x9);
    A(9,4)=dr_dx_from(y6,x6,y9,x9);
    A(9,5)=dr_dy_to(y6,x6,y9,x9);
    A(9,6)=dr_dx_to(y6,x6,y9,x9);
    A(9,10)=-1;
    
    A(10,5)=dr_dy_from(y9,x9,y15,x15);
    A(10,6)=dr_dx_from(y9,x9,y15,x15);
    A(10,7)=dr_dy_to(y9,x9,y15,x15);
    A(10,8)=dr_dx_to(y9,x9,y15,x15);
    A(10,11)=-1;
    
    A(11,1)=dr_dy_to(y9,x9,y1,x1);
    A(11,2)=dr_dx_to(y9,x9,y1,x1);
    A(11,5)=dr_dy_from(y9,x9,y1,x1);
    A(11,6)=dr_dx_from(y9,x9,y1,x1);
    A(11,11)=-1;
    
    A(12,3)=dr_dy_to(y9,x9,y6,x6);
    A(12,4)=dr_dx_to(y9,x9,y6,x6);
    A(12,5)=dr_dy_from(y9,x9,y6,x6);
    A(12,6)=dr_dx_from(y9,x9,y6,x6);
    A(12,11)=-1;
    
    A(13,1)=dr_dy_to(y15,x15,y1,x1);
    A(13,2)=dr_dx_to(y15,x15,y1,x1);
    A(13,7)=dr_dy_from(y15,x15,y1,x1);
    A(13,8)=dr_dx_from(y15,x15,y1,x1);
    A(13,12)=-1;
    
    A(14,5)=dr_dy_to(y15,x15,y9,x9);
    A(14,6)=dr_dx_to(y15,x15,y9,x9);
    A(14,7)=dr_dy_from(y15,x15,y9,x9);
    A(14,8)=dr_dx_from(y15,x15,y9,x9);
    A(14,12)=-1;
    
    
    %Normal matrix
    N = A'*P*A;

    %Case a, matrix G
    %Scaling
    a=sqrt(x1^2+x6^2+x9^2+x15^2+y1^2+y6^2+y9^2+y15^2);
    
    %Matrix G
   G=,[0,1/sqrt(p),0,1/sqrt(p),0,1/sqrt(p),0,1/sqrt(p),0,0,0,0],[,1/sqrt(p)quad0,1/sqrt(p),0,1/sqrt(p),0,1/sqr(p),0,0,0,0,0],[,-x1/ay1/a-x6/ay6/a-x9/aquady9/a-x15/ay15/a,0,0,0,0]];]:} 

    %B matrix   
    %Case b
%     B = 

    %Case c
%     B = 
     
    %Case d
%     B = 

     %Extended normal matrix
	 %For case a
     %N_ext = 
	
    %For case b, c, d
%     N_ext = 

    %Vector of right hand side of normal equations
    n = A'*P*l;
    
    %Extended vector of right hand side of normal equations
%     n_ext = 

    %Inversion of normal matrix / Cofactor matrix of the unknowns
%     Q_xx_ext = 
    
    %Reduced cofactor matrix of the unknowns
%     Q_xx = 
    
    %Solution of normal equation
%     x_hat = 
    
    %Adjusted unknowns
%     X_hat = 
    
    %Update
    X_0 = X_hat;
    
    y1 = X_0(1);
    x1 = X_0(2);
    y6 = X_0(3);
    x6 = X_0(4);
    y9 = X_0(5);
    x9 = X_0(6);
    y15 = X_0(7);
    x15 = X_0(8);
    w1 = X_0(9);
    w6 = X_0(10);
    w9 = X_0(11);
    w15 = X_0(12);
    
    %Check 1
%     max_x_hat 

	%Vector of residuals
	% v = 
	v_gon = v(6:14,1)*200/pi;            %Convert to [gon]

	%Objective function
	vTPv = v'*P*v;

	%Vector of adjusted observations
	L_hat = L+v;
	L_hat_gon = L_hat(6:14)*200/pi;      %Convert to [gon]

	% distances
	Phi_X_hat(1) = dis(y6,x6,y1,x1);
	Phi_X_hat(2) = dis(y9,x9,y1,x1);
	Phi_X_hat(3) = dis(y9,x9,y6,x6);
	Phi_X_hat(4) = dis(y15,x15,y1,x1);
	Phi_X_hat(5) = dis(y15,x15,y9,x9);
	% directions
	Phi_X_hat(6) = direction(y1,x1,y6,x6,w1);
	Phi_X_hat(7) = direction(y1,x1,y15,x15,w1);
	Phi_X_hat(8) = direction(y6,x6,y1,x1,w6);
	Phi_X_hat(9) = direction(y6,x6,y9,x9,w6);
	Phi_X_hat(10) = direction(y9,x9,y15,x15,w9);
	Phi_X_hat(11) = direction(y9,x9,y1,x1,w9);
	Phi_X_hat(12) = direction(y9,x9,y6,x6,w9);
	Phi_X_hat(13) = direction(y15,x15,y1,x1,w15);
	Phi_X_hat(14) = direction(y15,x15,y9,x9,w15);
	
	%Check 2
    % Check2 = 

    
    %Update number of iterations
    iteration = iteration+1;

% end

% Final Check
if Check2<=delta
    disp('Everything is fine!')
else
    disp('Something is wrong.')
end

%Empirical reference standard deviation
s_0 = sqrt(vTPv/r);

%VC matrix of adjusted unknowns
S_XX_hat = s_0^2*Q_xx;

%Standard deviation of the adjusted unknowns
s_X = sqrt(diag(S_XX_hat));
s_X_gon = s_X(9:12,1)*200/pi;          %Convert to [gon]

%Cofactor matrix of adjusted observations
Q_LL_hat = A*Q_xx*A';

%VC matrix of adjusted observations
S_LL_hat = s_0^2*Q_LL_hat;

%Standard deviation of the adjusted observations
s_L_hat = sqrt(diag(S_LL_hat));
s_L_hat_gon = s_L_hat(6:14)*200/pi;    %Convert to [gon]

%Cofactor matrix of the residuals
Q_vv = Q_LL-Q_LL_hat;

%VC matrix of residuals
S_vv = s_0^2*Q_vv;

%Standard deviation of the residuals
s_v = sqrt(diag(S_vv));
s_v_gon = s_v(6:14,1)*200/pi;         %Convert to [gon]

%De-reduced unknowns
y1 = X_0(1)+y_c;
x1 = X_0(2)+x_c;
y6 = X_0(3)+y_c;
x6 = X_0(4)+x_c;
y9 = X_0(5)+y_c;
x9 = X_0(6)+x_c;
y15 = X_0(7)+y_c;
x15 = X_0(8)+x_c;

%Estimated unknown parameters
X_final =  [y1 x1 y6 x6 y9 x9 y15 x15 w1 w6 w9 w15]';

%Convert to [gon] and check the quadrants
gon = X_final(9:12,1)*200/pi;
gon(1) = gon(1)+400;
gon(2) = gon(2)+400;
gon(4) = gon(4)+400;


% Write to file: X_hat [m] for case b
% fid = fopen('X_hat_case_b', 'w');  
% fprintf(fid, '%8.25f\n',X_final);
% fclose(fid);

% fidQxx = fopen('Q_xx_case_b', 'w');   
% fprintf(fidQxx, '%8.25f %8.25f %8.25f %8.25f %8.25f %8.25f %8.25f %8.25f %8.25f %8.25f %8.25f %8.25f\n',Q_xx);
% fclose(fidQxx);





