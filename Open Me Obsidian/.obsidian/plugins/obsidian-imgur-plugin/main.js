/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const IMGUR_PLUGIN_CLIENT_ID = "5d3647b14ed585f";
const IMGUR_API_BASE = "https://api.imgur.com/3/";
const IMGUR_ACCESS_TOKEN_LOCALSTORAGE_KEY = "imgur-access_token";

class UploadStrategy {
    constructor(id, description) {
        this.id = id;
        this.description = description;
        UploadStrategy.valuesArr.push(this);
    }
    static get values() {
        return this.valuesArr;
    }
}
UploadStrategy.valuesArr = [];
UploadStrategy.ANONYMOUS_IMGUR = new UploadStrategy("ANONYMOUS_IMGUR", "Anonymous Imgur upload");
UploadStrategy.AUTHENTICATED_IMGUR = new UploadStrategy("AUTHENTICATED_IMGUR", "Authenticated Imgur upload");

class ApiError extends Error {
}

class ImgurAuthenticatedUploader {
    constructor(client) {
        this.client = client;
    }
    upload(image) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.client.upload(image)).data.link;
        });
    }
}

const ONE_SECOND_MILLIS = 1000;
const OPEN_BROWSER_IN_SECONDS = 4;
class ImgurAuthModal extends obsidian.Modal {
    constructor(clientId, app, afterClose) {
        super(app);
        this.afterClose = afterClose;
        this.secondsLeft = OPEN_BROWSER_IN_SECONDS;
        this.opened = false;
        this.intervalId = null;
        this.authLink = `https://api.imgur.com/oauth2/authorize?client_id=${clientId}&response_type=token`;
    }
    get isOpen() {
        return this.opened;
    }
    onOpen() {
        this.opened = true;
        this.timerDiv = this.modalEl.createDiv();
        this.updateText();
        this.intervalId = setInterval(() => {
            this.secondsLeft -= 1;
            this.updateText();
            if (this.secondsLeft === 0) {
                window.open(this.authLink);
                clearInterval(this.intervalId);
            }
        }, ONE_SECOND_MILLIS);
        this.addNoWaitDiv(this.intervalId);
        new obsidian.ButtonComponent(this.modalEl.createDiv())
            .setButtonText("Cancel")
            .setCta()
            .onClick(() => this.close());
    }
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            clearInterval(this.intervalId);
            this.opened = false;
            // console.log(this.afterClose);
            if (this.afterClose)
                yield this.afterClose();
        });
    }
    addNoWaitDiv(interval) {
        const linkEl = createEl("a", { href: this.authLink, text: "here" });
        const noWaitDiv = this.modalEl.createDiv();
        noWaitDiv.appendText("If you do not want to wait, click ");
        noWaitDiv.append(linkEl);
        linkEl.onclick = () => {
            clearInterval(interval);
            this.secondsLeft = 0;
            this.updateText();
        };
        return noWaitDiv;
    }
    updateText() {
        this.timerDiv.setText(`Please complete authentication at imgur.com; Opening browser in ${this.secondsLeft} seconds...`);
    }
}

class ImgurAuthenticationStatus {
    constructor(parent, settingsTab) {
        this.parent = parent;
        this.settingsTab = settingsTab;
    }
    display() {
        return __awaiter(this, void 0, void 0, function* () {
            const settingItem = this.parent.createDiv();
            settingItem.addClass("setting-item");
            const settingItemInfo = settingItem.createDiv();
            settingItemInfo.addClass("setting-item-info");
            const settingItemControl = settingItem.createDiv();
            settingItemControl.addClass("setting-item-control");
            this.authStatusDiv = settingItemInfo.createDiv();
            this.buttonsDiv = settingItemControl;
            yield this.updateAll();
        });
    }
    updateAll() {
        return __awaiter(this, void 0, void 0, function* () {
            this.authStatusDiv.empty();
            this.buttonsDiv.empty();
            yield this.updateStatus();
            this.drawButtons();
        });
    }
    updateStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const uploader = this.getAuthenticatedUploader();
            if (!uploader) {
                this.setNotAuthenticated();
                return;
            }
            this.authStatusDiv.setText("Checking Imgur authentication...");
            try {
                const currentUserName = (yield uploader.client.accountInfo()).data.url;
                this.authStatusDiv.setText(`Authenticated as: ${currentUserName} ✅`);
                this.authenticated = true;
            }
            catch (e) {
                if (e instanceof TypeError && e.message === "Failed to fetch") {
                    this.authStatusDiv.setText("Internet connection problem");
                }
                else if (e instanceof ApiError) {
                    this.authStatusDiv.setText(`Imgur session error: ${e.message}`);
                }
                else {
                    // eslint-disable-next-line no-console
                    console.warn("Not authenticated, exception: ", e);
                    this.setNotAuthenticated();
                }
            }
        });
    }
    getAuthenticatedUploader() {
        if (this.settingsTab.plugin.imgUploader &&
            this.settingsTab.plugin.imgUploader instanceof ImgurAuthenticatedUploader) {
            return this.settingsTab.plugin.imgUploader;
        }
        return null;
    }
    setNotAuthenticated() {
        this.authStatusDiv.setText("Not authenticated");
        this.authenticated = false;
    }
    drawButtons() {
        if (this.authenticated) {
            this.addLogoutButton(this.buttonsDiv);
        }
        else {
            this.addAuthButton(this.buttonsDiv);
        }
    }
    addLogoutButton(el) {
        new obsidian.ButtonComponent(el)
            .setButtonText("Logout")
            .setWarning()
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            localStorage.removeItem(IMGUR_ACCESS_TOKEN_LOCALSTORAGE_KEY);
            this.settingsTab.plugin.setupImagesUploader();
            yield this.updateAll();
        }));
    }
    addAuthButton(parentEl) {
        new obsidian.ButtonComponent(parentEl)
            .setButtonText("Authenticate")
            .setCta()
            .onClick(() => {
            const modal = new ImgurAuthModal(IMGUR_PLUGIN_CLIENT_ID, this.settingsTab.app, () => __awaiter(this, void 0, void 0, function* () {
                yield this.updateAll();
            }));
            modal.open();
            this.settingsTab.authModal = modal;
        });
    }
}

const REGISTER_CLIENT_URL = "https://api.imgur.com/oauth2/addclient";
class ImgurPluginSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.plugin.registerObsidianProtocolHandler("imgur-oauth", (params) => {
            if (!this.authModal || !this.authModal.isOpen)
                return;
            if (params.error) {
                // eslint-disable-next-line no-new
                new obsidian.Notice(`Authentication failed with error: ${params.error}`);
                return;
            }
            const mappedData = params.hash.split("&").map((p) => {
                const sp = p.split("=");
                return [sp[0], sp[1]];
            });
            const map = new Map(mappedData);
            localStorage.setItem(IMGUR_ACCESS_TOKEN_LOCALSTORAGE_KEY, map.get("access_token"));
            this.plugin.setupImagesUploader();
            this.authModal.close();
            this.authModal = null;
        });
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Imgur Plugin settings" });
        const uploadApproachDiv = containerEl.createDiv();
        this.strategyDiv = containerEl.createDiv();
        new obsidian.Setting(uploadApproachDiv)
            .setName("Images upload approach")
            .addDropdown((dropdown) => {
            UploadStrategy.values.forEach((s) => {
                dropdown.addOption(s.id, s.description);
            });
            dropdown.setValue(this.plugin.settings.uploadStrategy);
            dropdown.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.uploadStrategy = v;
                this.plugin.setupImagesUploader();
                yield this.drawSettings(this.strategyDiv);
            }));
        });
        this.drawSettings(this.strategyDiv)
            .then(() => { })
            .finally(() => { });
        new obsidian.Setting(containerEl).setName("Confirm before upload").addToggle((t) => {
            t.setValue(this.plugin.settings.showRemoteUploadConfirmation);
            t.onChange((newValue) => {
                this.plugin.settings.showRemoteUploadConfirmation = newValue;
            });
        });
    }
    hide() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.saveSettings();
            this.plugin.setupImagesUploader();
        });
    }
    drawSettings(parentEl) {
        return __awaiter(this, void 0, void 0, function* () {
            parentEl.empty();
            switch (this.plugin.settings.uploadStrategy) {
                case UploadStrategy.ANONYMOUS_IMGUR.id:
                    this.drawAnonymousClientIdSetting(parentEl);
                    break;
                case UploadStrategy.AUTHENTICATED_IMGUR.id:
                    yield new ImgurAuthenticationStatus(parentEl, this).display();
                    break;
                default:
                    throw new Error("There must be a bug, this code is not expected to be reached");
            }
        });
    }
    drawAnonymousClientIdSetting(containerEl) {
        new obsidian.Setting(containerEl)
            .setName("Client ID")
            .setTooltip(`Client ID is required for anonymous images upload. If you do not provide your own Client ID, the one shipped with the plugin and shared with many other users will be used. If you face issues with images upload, it's better generate your own Client ID"`)
            .setDesc(ImgurPluginSettingsTab.clientIdSettingDescription())
            .addText((text) => text
            .setPlaceholder("Enter your client_id")
            .setValue(this.plugin.settings.clientId)
            .onChange((value) => {
            this.plugin.settings.clientId = value;
        }));
    }
    static clientIdSettingDescription() {
        const fragment = document.createDocumentFragment();
        const a = document.createElement("a");
        a.textContent = REGISTER_CLIENT_URL;
        a.setAttribute("href", REGISTER_CLIENT_URL);
        fragment.append("Generate your own Client ID at ");
        fragment.append(a);
        return fragment;
    }
}

function handleImgurErrorResponse(resp) {
    return __awaiter(this, void 0, void 0, function* () {
        if (resp.headers.get("Content-Type") === "application/json") {
            throw new ApiError((yield resp.json()).data.error);
        }
        throw new Error(yield resp.text());
    });
}
class ImgurClient {
    constructor(accessToken) {
        this.accessToken = accessToken;
    }
    accountInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield fetch(`${IMGUR_API_BASE}account/me`, {
                headers: new Headers({ Authorization: `Bearer ${this.accessToken}` }),
            });
            if (!r.ok) {
                yield handleImgurErrorResponse(r);
            }
            return (yield r.json());
        });
    }
    upload(image) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestData = new FormData();
            requestData.append("image", image);
            const resp = yield fetch(`${IMGUR_API_BASE}image`, {
                method: "POST",
                headers: new Headers({ Authorization: `Bearer ${this.accessToken}` }),
                body: requestData,
            });
            if (!resp.ok) {
                yield handleImgurErrorResponse(resp);
            }
            return (yield resp.json());
        });
    }
}

class ImgurAnonymousUploader {
    constructor(clientId) {
        this.clientId = clientId;
    }
    upload(image) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestData = new FormData();
            requestData.append("image", image);
            const resp = yield fetch(`${IMGUR_API_BASE}image`, {
                method: "POST",
                headers: new Headers({ Authorization: `Client-ID ${this.clientId}` }),
                body: requestData,
            });
            if (!resp.ok) {
                yield handleImgurErrorResponse(resp);
            }
            return (yield resp.json()).data.link;
        });
    }
}

function defaultAnonymousUploader() {
    return new ImgurAnonymousUploader(IMGUR_PLUGIN_CLIENT_ID);
}
function buildUploaderFrom(settings) {
    if (UploadStrategy.AUTHENTICATED_IMGUR.id === settings.uploadStrategy) {
        const accessToken = localStorage.getItem(IMGUR_ACCESS_TOKEN_LOCALSTORAGE_KEY);
        if (!accessToken) {
            return undefined;
        }
        return new ImgurAuthenticatedUploader(new ImgurClient(accessToken));
    }
    if (settings.uploadStrategy === UploadStrategy.ANONYMOUS_IMGUR.id) {
        if (settings.clientId) {
            return new ImgurAnonymousUploader(settings.clientId);
        }
        return defaultAnonymousUploader();
    }
    throw Error("This line of code should never be reached");
}

class RemoteUploadConfirmationDialog extends obsidian.Modal {
    constructor() {
        super(...arguments);
        this.userResponded = false;
        this.resp = new Promise((resolve) => {
            this.deferredResolve = resolve;
        });
    }
    response() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.resp;
        });
    }
    onOpen() {
        this.titleEl.setText("Imgur plugin");
        this.contentEl.setText("Would you like to upload to Imgur or paste your content locally?");
        const buttonsDiv = this.modalEl.createDiv("modal-button-container");
        new obsidian.ButtonComponent(buttonsDiv)
            .setButtonText("Always upload")
            .setCta()
            .onClick(() => {
            this.deferredResolve({ shouldUpload: true, alwaysUpload: true });
            this.afterUserInput();
        });
        new obsidian.ButtonComponent(buttonsDiv)
            .setButtonText("Upload")
            .setCta()
            .onClick(() => {
            this.deferredResolve({ shouldUpload: true });
            this.afterUserInput();
        });
        new obsidian.ButtonComponent(buttonsDiv)
            .setButtonText("Paste locally")
            .onClick(() => {
            this.deferredResolve({ shouldUpload: false });
            this.afterUserInput();
        });
    }
    afterUserInput() {
        this.userResponded = true;
        this.close();
    }
    onClose() {
        if (!this.userResponded)
            this.deferredResolve({ shouldUpload: undefined });
    }
}

class PasteEventCopy extends ClipboardEvent {
    constructor(originalEvent) {
        const { files } = originalEvent.clipboardData;
        const dt = new DataTransfer();
        for (let i = 0; i < files.length; i += 1) {
            dt.items.add(files.item(i));
        }
        super("paste", { clipboardData: dt });
    }
}

class DragEventCopy extends DragEvent {
    static create(fromEvent, files) {
        const dataTransfer = new DataTransfer();
        for (let i = 0; i < files.length; i += 1) {
            dataTransfer.items.add(files[i]);
        }
        return new DragEventCopy(fromEvent.type, {
            dataTransfer,
            clientX: fromEvent.clientX,
            clientY: fromEvent.clientY,
        });
    }
}

const DEFAULT_SETTINGS = {
    uploadStrategy: UploadStrategy.ANONYMOUS_IMGUR.id,
    clientId: null,
    showRemoteUploadConfirmation: true,
};
class ImgurPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.customPasteEventCallback = (e, _, markdownView) => __awaiter(this, void 0, void 0, function* () {
            if (e instanceof PasteEventCopy)
                return;
            if (!this.imgUploader) {
                ImgurPlugin.showUnconfiguredPluginNotice();
                return;
            }
            const { files } = e.clipboardData;
            if (files.length === 0 || !files[0].type.startsWith("image")) {
                return;
            }
            e.preventDefault();
            if (this.settings.showRemoteUploadConfirmation) {
                const modal = new RemoteUploadConfirmationDialog(this.app);
                modal.open();
                const userResp = yield modal.response();
                switch (userResp.shouldUpload) {
                    case undefined:
                        return;
                    case true:
                        if (userResp.alwaysUpload) {
                            this.settings.showRemoteUploadConfirmation = false;
                            this.saveSettings()
                                .then(() => { })
                                .catch(() => { });
                        }
                        break;
                    case false:
                        markdownView.currentMode.clipboardManager.handlePaste(new PasteEventCopy(e));
                        return;
                    default:
                        return;
                }
            }
            for (let i = 0; i < files.length; i += 1) {
                this.uploadFileAndEmbedImgurImage(files[i]).catch(() => {
                    markdownView.currentMode.clipboardManager.handlePaste(new PasteEventCopy(e));
                });
            }
        });
        this.customDropEventListener = (e, _, markdownView) => __awaiter(this, void 0, void 0, function* () {
            if (e instanceof DragEventCopy)
                return;
            if (!this.imgUploader) {
                ImgurPlugin.showUnconfiguredPluginNotice();
                return;
            }
            if (e.dataTransfer.types.length !== 1 ||
                e.dataTransfer.types[0] !== "Files") {
                return;
            }
            // Preserve files before showing modal, otherwise they will be lost from the event
            const { files } = e.dataTransfer;
            e.preventDefault();
            if (this.settings.showRemoteUploadConfirmation) {
                const modal = new RemoteUploadConfirmationDialog(this.app);
                modal.open();
                const userResp = yield modal.response();
                switch (userResp.shouldUpload) {
                    case undefined:
                        return;
                    case true:
                        if (userResp.alwaysUpload) {
                            this.settings.showRemoteUploadConfirmation = false;
                            this.saveSettings()
                                .then(() => { })
                                .catch(() => { });
                        }
                        break;
                    case false: {
                        markdownView.currentMode.clipboardManager.handleDrop(DragEventCopy.create(e, files));
                        return;
                    }
                    default:
                        return;
                }
            }
            for (let i = 0; i < files.length; i += 1) {
                if (!files[i].type.startsWith("image")) {
                    return;
                }
            }
            // Adding newline to avoid messing images pasted via default handler
            // with any text added by the plugin
            this.getEditor().replaceSelection("\n");
            const promises = [];
            const filesFailedToUpload = [];
            for (let i = 0; i < files.length; i += 1) {
                const image = files[i];
                const uploadPromise = this.uploadFileAndEmbedImgurImage(image).catch(() => {
                    filesFailedToUpload.push(image);
                });
                promises.push(uploadPromise);
            }
            yield Promise.all(promises);
            if (filesFailedToUpload.length === 0) {
                return;
            }
            markdownView.currentMode.clipboardManager.handleDrop(DragEventCopy.create(e, filesFailedToUpload));
        });
    }
    get imgUploader() {
        return this.imgUploaderField;
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(Object.assign({}, DEFAULT_SETTINGS), (yield this.loadData()));
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new ImgurPluginSettingsTab(this.app, this));
            this.setupImgurHandlers();
            this.setupImagesUploader();
        });
    }
    setupImagesUploader() {
        this.imgUploaderField = buildUploaderFrom(this.settings);
    }
    setupImgurHandlers() {
        this.registerEvent(this.app.workspace.on("editor-paste", this.customPasteEventCallback));
        this.registerEvent(this.app.workspace.on("editor-drop", this.customDropEventListener));
    }
    static showUnconfiguredPluginNotice() {
        const fiveSecondsMillis = 5000;
        // eslint-disable-next-line no-new
        new obsidian.Notice("⚠️ Please configure Imgur plugin or disable it", fiveSecondsMillis);
    }
    uploadFileAndEmbedImgurImage(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const pasteId = (Math.random() + 1).toString(36).substr(2, 5);
            this.insertTemporaryText(pasteId);
            let imgUrl;
            try {
                imgUrl = yield this.imgUploaderField.upload(file);
            }
            catch (e) {
                if (e instanceof ApiError) {
                    this.handleFailedUpload(pasteId, `Upload failed, remote server returned an error: ${e.message}`);
                }
                else {
                    // eslint-disable-next-line no-console
                    console.error("Failed imgur request: ", e);
                    this.handleFailedUpload(pasteId, "⚠️Imgur upload failed, check dev console");
                }
                throw e;
            }
            this.embedMarkDownImage(pasteId, imgUrl);
        });
    }
    insertTemporaryText(pasteId) {
        const progressText = ImgurPlugin.progressTextFor(pasteId);
        this.getEditor().replaceSelection(`${progressText}\n`);
    }
    static progressTextFor(id) {
        return `![Uploading file...${id}]()`;
    }
    embedMarkDownImage(pasteId, imageUrl) {
        const progressText = ImgurPlugin.progressTextFor(pasteId);
        const markDownImage = `![](${imageUrl})`;
        ImgurPlugin.replaceFirstOccurrence(this.getEditor(), progressText, markDownImage);
    }
    handleFailedUpload(pasteId, message) {
        const progressText = ImgurPlugin.progressTextFor(pasteId);
        ImgurPlugin.replaceFirstOccurrence(this.getEditor(), progressText, `<!--${message}-->`);
    }
    getEditor() {
        const mdView = this.app.workspace.activeLeaf.view;
        return mdView.editor;
    }
    static replaceFirstOccurrence(editor, target, replacement) {
        const lines = editor.getValue().split("\n");
        for (let i = 0; i < lines.length; i += 1) {
            const ch = lines[i].indexOf(target);
            if (ch !== -1) {
                const from = { line: i, ch };
                const to = { line: i, ch: ch + target.length };
                editor.replaceRange(replacement, from, to);
                break;
            }
        }
    }
}

module.exports = ImgurPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
